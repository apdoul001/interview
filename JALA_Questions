                                                    1-CLIENT SIDE ATTACKS

1.1 Cross Site Scripting:Cross-site scripting attacks, also called XSS attacks, are a type of injection attack that injects malicious 
  code into otherwise safe websites. An attacker will use a flaw in a target web application to send some kind of malicious code, 
  most commonly client-side JavaScript, to an end user. Rather than targeting the application’s host itself, XSS attacks generally 
  target the application’s users directly. 
  
       Example of injected codes : 
         "-prompt(8)-"
        '-prompt(8)-'
        ";a=prompt,a()//
        ';a=prompt,a()//
        '-eval("window['pro'%2B'mpt'](8)")-'
        "-eval("window['pro'%2B'mpt'](8)")-"
        "onclick=prompt(8)>"@x.y

1.2 Cross-Site Request Forgery(CSRF): also called CSRF, is a type of web security vulnerability, identified as one of the OWASP Top 10 Web Application 
  Security Risks. A CSRF attack can be used to send unwanted requests to a web application or site from an authenticated user. This allows an attacker 
  to craft malicious content to trick users who are already logged in and authenticated on a legitimate website to perform actions that they do not 
  intend to and may remain unaware of.
      
      Example:
        <html>
        <!-- CSRF PoC - generated by Burp Suite Professional -->
        <body>
        <script>history.pushState('', '', '/')</script>
          <form action="https://readcted.com/my-account/change-email" method="POST">
            <input type="hidden" name="email" value="asd&#64;asd&#46;asd" />
            <input type="hidden" name="csrf" value="tZqZzQ1tiPj8KFnO4FOAawq7UsYzDk8E" />
            <input type="submit" value="Submit request" />
          </form>
          <img src="https://redacted.com/?search=term%0d%0aSet-Cookie:%20csrf=tZqZzQ1tiPj8KFnO4FOAawq7UsYzDk8E" onerror="document.forms[0].submit();"/>
        </body>
      </html>

1.3 Cross Origin Resource Sharing: this misconfiguration can leave the application at a high-risk of compromise, resulting in an impact on the
  confidentiality and integrity of data by allowing third-party sites to carry out privileged requests through your website’s authenticated users such 
  as retrieving user setting information or saved payment card data.
  
      Example:
 ```html
    Access-Control-Allow-Headers 
    Access-Control-Max-Age 
    Access-Control-Request-Headers 
    Access-Control-Request-Method 
    Origin 
```
1.4 Clickjacking: Clickjacking is an attack that tricks a user into clicking a webpage element which is invisible or disguised as another element. This can cause users to unwittingly download malware, visit malicious web pages, provide credentials or sensitive information, transfer money, or purchase products online.

                                                    2-SERVER-SIDE ATTACKS

2.1 SQL Injection: SQL injection, also known as SQLI, is a common attack vector that uses malicious SQL code for backend database manipulation to access information that was not intended to be displayed. This information may include sensitive company data, user lists or customer card details.

Types:
i-In-band SQLi (Classic)
ii-Inferential SQLi (Blind) 
iii-Out-of-band SQLi

2.2 Authentication: This type of attack targets and attempts to exploit the authentication process a web site uses to verify the identity of a user, service, or application Example; brute-forcing a login page.

2.3 Directory Traversal: This attack exploits insufficient security validation or sanitization of user-supplied file names, such that characters representing "traverse to parent directory" are passed through to the operating system's file system API. An affected application can be exploited to gain unauthorized access to the file system. Example; ../../../../etc/passwd

2.4 Command Injection: command injection (also known as shell injection) is a web security vulnerability that allows an attacker to execute arbitrary operating system (OS) commands on the server that is running an application, and typically fully compromise the application and all its data. Example of commands are; whoami, id

2.5 Business Logic Vulnerabilities:Business logic vulnerabilities are design and implementation flaws in software applications. They have a legitimate business function, but can also be exploited by malicious attackers to create unexpected behavior. These flaws often result from an application’s inability to identify and safely handle unexpected user actions.

2.6 Information Disclosure: Information disclosure is when a web application fails to properly protect confidential information, which causes revealing sensitive information or data of the users or anything related to users to any third party.

2.7 Access Controls: Access control vulnerabilities occur when users are able to act outside of their intended permissions. This typically leads to unauthorized access, information disclosure, and modification or destruction of data.

2.8 File Uploads: File upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size. Failing to properly enforce restrictions on these could mean that even a basic image upload function can be used to upload arbitrary and potentially dangerous files instead. This could even include server-side script files that enable remote code execution.

2.9 Server Side Request Forgey(SSRF): A Server-Side Request Forgery (SSRF) attack involves an attacker abusing server functionality to access or modify resources. The attacker targets an application that supports data imports from URLs or allows them to read data from URLs. URLs can be manipulated, either by replacing them with new ones or by tampering with URL path traversal.

2.10 XXE Injection: XXE (XML External Entity Injection) is a common web-based security vulnerability that enables an attacker to interfere with the processing of XML data within a web application.XXE attacks can result in port scanning within the internal network, server-side request forgery (SSRF), data exfiltration, use of an organization’s servers to perform denial of service (DoS), and more. 

2.11 Session Management:session management vulnerabilities, the attackers manually detect gaps in user validation and verification, then use automated tools to retrieve further information and gain deeper control of the application
